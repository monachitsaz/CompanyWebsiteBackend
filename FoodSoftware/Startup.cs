using Common;
using FoodSoftware.Common;
using FoodSoftware.Controllers;
using FoodSoftware.Helpers;
using Helpers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Repository;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace FoodSoftware
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers().AddNewtonsoftJson(); 
            #region DI
            services.AddScoped(typeof(ISqlUtility), typeof(SqlUtility));
            services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));
            services.AddScoped(typeof(IArticleHelper), typeof(ArticleHelper));
            services.AddScoped(typeof(ISubSystemsHelper), typeof(SubSystemsHelper));
            services.AddScoped(typeof(ISectorsHelper), typeof(SectorsHelper));
            services.AddScoped(typeof(IHomePageHelper), typeof(HomePageHelper));
            services.AddScoped(typeof(ICustomerContactHelper), typeof(CustomerContactHelper)); 
            services.AddScoped(typeof(IFileHelper), typeof(FileHelper));
            services.AddScoped(typeof(IMenuItemHelper), typeof(MenuItemHelper));
            services.AddScoped(typeof(ILinkHelper), typeof(LinkHelper));
            services.AddScoped(typeof(IContactsHelper), typeof(ContactsHelper));
            services.AddScoped(typeof(IContactUsHelper), typeof(ContactUsHelper));
            services.AddScoped(typeof(IAboutUsHelper), typeof(AboutUsHelper));
            services.AddScoped(typeof(ILogoHelper), typeof(LogoHelper));
            services.AddScoped(typeof(IUserHelper), typeof(UserHelper));
            services.AddTransient<IMailService, MailService>();
            services.AddTransient<IContactUsStaticHelper, ContactUsStaticHelper>();
            #endregion
            services.Configure<MailSettings>(Configuration.GetSection("MailSettings"));


            #region Register swagger
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1",
                    Title = "MainProjectApi",
                    Description = "MainProjectApi - Version01",
                    //TermsOfService = new Uri("https://example.com/terms"),
                    //Contact = new OpenApiContact
                    //{
                    //    Name = "Shayne Boyer",
                    //    Email = string.Empty,
                    //    Url = new Uri("https://twitter.com/spboyer"),
                    //},
                    //License = new OpenApiLicense
                    //{
                    //    Name = "MainProjectApi",
                    //    Url = new Uri("https://example.com/license"),
                    //}
                });

                //Locate the XML file being generated by ASP.NET...
                //var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                //var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                //c.IncludeXmlComments(xmlPath);
                #endregion


                //swagger2 + .support

            #region swagger Authorization button
                var security = new Dictionary<string, IEnumerable<string>>
                {
                    {"Bearer",new string[]{ } },
                };

                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme()
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    },
                    Scheme = "Bearer",
                    Name = "Authorization",
                    In = ParameterLocation.Header,

                });

                c.AddSecurityRequirement(new OpenApiSecurityRequirement{
                {
                    new OpenApiSecurityScheme{
                        Reference = new OpenApiReference{
                            Id = "Bearer", //The name of the previously defined security scheme.
                            Type = ReferenceType.SecurityScheme
                        }
                    },new List<string>()
                }
            });



                //for documentation
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                c.IncludeXmlComments(xmlPath);

            });
            #endregion

            #region Configure JWT Authentication

            var secretKey = Configuration.GetValue<string>("TokenKey");
            var tokenTimeOut = Configuration.GetValue<int>("TokenTimeOut");

            var key = Encoding.UTF8.GetBytes(secretKey);

            ////X509Certificate2 cert = new X509Certificate2("MySelfSignedCertificate.pfx", "password");
            ////SecurityKey key2 = new X509SecurityKey(cert); //well, seems to be that simple

            //        services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
            //.AddCookie()

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })

                .AddJwtBearer(x =>
                {
                    x.RequireHttpsMetadata = false;
                    x.SaveToken = true;

                    x.TokenValidationParameters = new TokenValidationParameters
                    {
                        //برای کنترل زمان توکن
                        ClockSkew = TimeSpan.FromMinutes(tokenTimeOut),
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        //IssuerSigningKey = key2,
                        IssuerSigningKey = new SymmetricSecurityKey(key),
                        ValidateIssuer = false,
                        ValidateAudience = false
                    };
                });


            #endregion

            #region Cors
            services.AddCors(options =>
            {
                options.AddPolicy("FoodSoftware",
                    builder =>
                    {
                        //here you can give special domain or ip
                        builder.WithOrigins("*");
                        builder.WithHeaders("*");
                        builder.WithMethods("*");

                    });
            });
            services.AddCors(options =>
            {
                options.AddPolicy("MyWebSite",
                    builder =>
                    {
                        //here you can give special domain or ip
                        builder.WithOrigins("*");
                        builder.WithHeaders("*");
                        builder.WithMethods("*");

                    });
            });
            #endregion
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseSwagger();


            //enable middleware to serve swagger ui
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "FoodSoftware v1");
            });
            loggerFactory.AddFile("Logs/api-{Date}.txt");

            app.UseHttpsRedirection();

            app.UseStaticFiles();

            app.UseRouting();

            app.UseCors("FoodSoftware");
            app.UseCors("MyWebSite");
            app.UseAuthentication();
            app.UseAuthorization();


            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
                endpoints.MapControllerRoute(
                    name: "default1",
                    pattern: "{controller=Subsystems}/{action=Introduction}/{title?}");
            });

        }
    }
}
